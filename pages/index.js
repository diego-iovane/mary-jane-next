import Head from 'next/head'
// import { GetContentContext } from '../context/ContentContext'
import { GetLanguageContext } from '../context/LanguageContext'
import Hero from '../components/home/Hero/Hero'
import Exhibition from '../components/home/Exhibition/Exhibition'
import ForExhibitors from '../components/home/ForExhibitors/ForExhibitors'
import MediaReviews from '../components/home/MediaReviews/MediaReviews'
import ExhibitorsSection from '../components/home/ExhibitorsSection/ExhibitorsSection'
import Rest from '../components/home/Rest/Rest'
import SponsorsSection from '../components/home/SponsorsSection/SponsorsSection'
// import ReviewSection from '../components/home/ReviewsSection/ReviewSection'
// import ImageGallery from '../components/home/ImageGallery/ImageGallery'
// import MediaSponsorsSection from '../components/home/MediaSponsorsSection/MediaSponsorsSection'
// import TicketsSection from '../components/ticketsSection/TicketsSection'
// import FloatingButton from '../components/floatingButton/FloatingButton'
// import Speakers from '../components/home/Speakers/Speakers'
// import Location from '../components/home/Location/Location'

export default function Home({ res }) {

  console.log(res)
  const { language } = GetLanguageContext()

  return (
    <div>
      <Head>
        <title>Mary Jane Berlin - Cannabis Expo Germany | Festival | Conference</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Hero data={res.data.pages.edges[0].node.hero} language={language} />
      <Exhibition data={res.data.pages.edges[0].node.exhibition} language={language} />
      <ForExhibitors data={res.data.pages.edges[0].node.forExhibitors} language={language} />
      <MediaReviews data={res.data.mediaReviews.edges} content={res.data.pages.edges[0].node.mediaReviews} language={language}/>
      <ExhibitorsSection data={res.data.exhibitors.edges} content={res.data.pages.edges[0].node.exhibitors} language={language} />
      <Rest />
      <SponsorsSection data={res.data.sponsors.edges} content={res.data.pages.edges[0].node.sponsorsSection} language={language}/>


      {/* <MediaSponsorsSection /> */}
      {/* <Speakers /> */}
      {/* <ReviewSection /> */}
      {/* <ImageGallery /> */}
      {/* <TicketsSection /> */}
      {/* <Location /> */}
      {/* <FloatingButton /> */}
    </div>
  )
}


export async function getServerSideProps(context) {

  const res = await fetch('https://b3ta40.myraidbox.de/graphql', {
    method: "POST",
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: `
      query NewQuery {
        pages(where: {id: 2}) {
          edges {
            node {
              hero {
                subtitleEn
                dateEn
                monthEn
                yearEn
                subtitleDe
                dateDe
                monthDe
                yearDe
                counterDaysDe
                counterDaysEn
                counterHoursEn
                counterMinutesEn
                ctaEn
                counterHoursDe
                counterMinutesDe
                counterSecondsDe
                counterSecondsEn
                ctaDe
                ctaUrl
              }
              exhibition {
                titleEnHomeExhibitor
                textEnHomeExhibitor
                ctaEnHomeExhibitor
                ctaUrlEnHomeExhibitor
                titleDeHomeExhibitor
                textDeHomeExhibitor
                ctaDeHomeExhibitor
                ctaUrlDeHomeExhibitor
                imageGalleryHomeExhibitor {
                  exhibitorGallery1 {
                    sourceUrl
                    altText
                  }
                  exhibitorGallery2 {
                    sourceUrl
                    altText
                  }
                  exhibitorGallery3 {
                    altText
                    sourceUrl
                  }
                  exhibitorGallery4 {
                    sourceUrl
                    altText
                  }
                  exhibitorGallery5 {
                    sourceUrl
                    altText
                  }
                }
              }
              forExhibitors {
                titleForExhibitorsEn
                forExhibitorsTextEn
                forExhibitorsCtaEn
                forExhibitorsCtaUrlEn
                forExhibitorsFeaturesEn {
                  internationalExhibitorsEn {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                  productsEn {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                  visitorsEn {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                }
                titleForExhibitorsDe
                forExhibitorsTextDe
                forExhibitorsCtaDe
                forExhibitorsCtaUrlDe
                forExhibitorsFeaturesDe {
                  internationalExhibitorsDe {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                  productsDe {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                  visitorsDe {
                    icon {
                      altText
                      sourceUrl
                    }
                    num
                    text
                  }
                }
              }
              mediaReviews {
                mediaReviewsTitleDe
                mediaReviewsTitleEn
              }
              exhibitors {
                exhibitorsTitleEn
                exhibitorsCtaOneEn
                exhibitorsCtaTwoEn
                exhibitorsTitleDe
                exhibitorsCtaOneDe
                exhibitorsCtaTwoDe
              }
              sponsorsSection {
                sponsorsTitleEn
                sponsorsCtaEn {
                  title
                  url
                }
                sponsorsTitleDe
                sponsorsCtaDe {
                  title
                  url
                }
              }
            }
          }
        }

        mediaReviews {
          edges {
            node {
              url
              logo {
                sourceUrl
              }
            }
          }
        }

        exhibitors(first: 50) {
          edges {
            node {
              logo {
                altText
                sourceUrl
                title
              }
              website
            }
          }
        }
        

        sponsors {
          edges {
            node {
              title
              logo {
                altText
                sourceUrl
              }
            }
          }
        }
      }
      `
    })
  })

  const json = await res.json()

  return {
    props: {
      res: json
    }
  }
}